import{j as e}from"./index-DrhACB-D.js";import{I as U}from"./Upload-ChF5xKSK.js";import{s as t,I as A,g as W,h as w,i as M,j as k,k as _}from"./Button.snippets-jfl9eMgX.js";import{useMDXComponents as X}from"./index-DmqVK_gK.js";import{S as s}from"./docs-CJ9d-umt.js";import"./index-DQDNmYQF.js";import"./index-BGiqdwja.js";import"./theming-C7i7v1dL.js";import"./tiny-invariant-CopsF_GD.js";function p(n){const o={em:"em",p:"p",strong:"strong",...X(),...n.components};return e.jsxs("div",{className:"content",children:[e.jsxs("h1",{children:["IconButton v",void 0]}),e.jsx("p",{children:e.jsx(o.p,{children:"Control element that is used to trigger some action, using just an Icon."})}),e.jsx("h3",{children:"Basic usage"}),e.jsx(s,{snippets:t.iconButton,children:e.jsx(A,{})}),e.jsx("hr",{}),e.jsx("h3",{children:"IconButton Variants"}),e.jsx("p",{children:e.jsxs(o.p,{children:["There IconButton can have seven different colors. The ",e.jsx(o.strong,{children:"color"}),` attribute
can be one of "inherit", "primary", "secondary", "info", "success",
"warning" and "error".`]})}),e.jsx(s,{snippets:t.iconButtonColor,children:e.jsx(W,{})}),e.jsx("hr",{}),e.jsx("h3",{children:"Disabled IconButton"}),e.jsx("p",{children:e.jsxs(o.p,{children:["The ",e.jsx(o.strong,{children:"disabled"}),` attribute specifies whether the IconButton can be
accessible or not. All colors of an IconButton has the same disabled
appearence.`]})}),e.jsx(s,{snippets:t.disabledIconButton,children:e.jsx(w,{})}),e.jsx("hr",{}),e.jsx("h3",{children:"IconButton Size"}),e.jsx("p",{children:e.jsxs(o.p,{children:[`IconButtons can be of 3 different sizes: "small", "medium" and "large". Size
can be defined using the `,e.jsx(o.strong,{children:"size"})," attribute."]})}),e.jsx(s,{snippets:t.iconButtonSize,children:e.jsx(M,{})}),e.jsx("hr",{}),e.jsx("h3",{children:"IconButton Action"}),e.jsx("p",{children:e.jsxs(o.p,{children:[`IconButtons are used to trigger some actions, such actions can be specified
via the `,e.jsx(o.strong,{children:"onClick"})," attribute. The ",e.jsx(o.strong,{children:"onClick"}),` attribute takes a
`,e.jsx(o.em,{children:"MouseEventHandler"})," function."]})}),e.jsx(s,{snippets:t.iconButtonWithAction,children:e.jsx(k,{})}),e.jsx("hr",{}),e.jsx("h3",{children:"IconButton ToolTip"}),e.jsx("p",{children:e.jsx(o.p,{children:`IconButtons can directly include a tooltip by adding the toolTipContent
property. It will be hidden when no value is set, visibility and position
properties are also available.`})}),e.jsx(s,{snippets:t.IconButtonToolTip,children:e.jsx(_,{})})]})}function H(n={}){const{wrapper:o}={...X(),...n.components};return o?e.jsx(o,{...n,children:e.jsx(p,{...n})}):p(n)}const K={title:"UnifiedUI/IconButton",component:U,parameters:{docs:{page:H}}},r={render:n=>e.jsx(A,{...n})},c={render:n=>e.jsx(W,{...n})},a={render:n=>e.jsx(w,{...n})},i={render:n=>e.jsx(M,{...n})},d={render:n=>e.jsx(k,{...n})},l={render:n=>e.jsx(_,{...n})};var u,h,m;r.parameters={...r.parameters,docs:{...(u=r.parameters)==null?void 0:u.docs,source:{originalSource:`{
  render: (args: any) => <IconButtonExample {...args} />
}`,...(m=(h=r.parameters)==null?void 0:h.docs)==null?void 0:m.source}}};var x,j,B;c.parameters={...c.parameters,docs:{...(x=c.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: (args: any) => <IconButtonColorExample {...args} />
}`,...(B=(j=c.parameters)==null?void 0:j.docs)==null?void 0:B.source}}};var I,g,b;a.parameters={...a.parameters,docs:{...(I=a.parameters)==null?void 0:I.docs,source:{originalSource:`{
  render: (args: any) => <DisabledIconButtonExample {...args} />
}`,...(b=(g=a.parameters)==null?void 0:g.docs)==null?void 0:b.source}}};var f,T,E;i.parameters={...i.parameters,docs:{...(f=i.parameters)==null?void 0:f.docs,source:{originalSource:`{
  render: (args: any) => <IconButtonSizeExample {...args} />
}`,...(E=(T=i.parameters)==null?void 0:T.docs)==null?void 0:E.source}}};var S,y,C;d.parameters={...d.parameters,docs:{...(S=d.parameters)==null?void 0:S.docs,source:{originalSource:`{
  render: (args: any) => <IconButtonWithActionExample {...args} />
}`,...(C=(y=d.parameters)==null?void 0:y.docs)==null?void 0:C.source}}};var v,z,D;l.parameters={...l.parameters,docs:{...(v=l.parameters)==null?void 0:v.docs,source:{originalSource:`{
  render: (args: any) => <IconButtonToolTipExample {...args} />
}`,...(D=(z=l.parameters)==null?void 0:z.docs)==null?void 0:D.source}}};const P=["BaseIconButton","BaseIconButtonColor","DisabledIconButton","IconButtonSize","IconButtonWithAction","IconButtonWithToolTip"];export{r as BaseIconButton,c as BaseIconButtonColor,a as DisabledIconButton,i as IconButtonSize,d as IconButtonWithAction,l as IconButtonWithToolTip,P as __namedExportsOrder,K as default};
